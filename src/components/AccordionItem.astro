---
const { ...props } = Astro.props;
const { id, question, answer, linkBlock } = props;
---

<li>
  <article>
    <h3>
      <button aria-expanded="false" aria-controls={id}>
        <span>{question}</span>
        <svg
          viewBox="0 0 10 10"
          aria-hidden="true"
          stroke="#181818"
          stroke-linecap="round"
        >
          <line class="vertical-line" x1="5" y1="1" x2="5" y2="9"></line>
          <line x1="1" y1="5" x2="9" y2="5"></line>
        </svg>
      </button>
    </h3>
    <div class="answer" id={id} aria-hidden="false">
      <div class="answer-content">
      {answer.map((a) => <p set:html={a} />)}
      {
        linkBlock && (
          <a class="link-block" href={linkBlock.url} target="_blank">
            {linkBlock.label}
          </a>
        )
      }
    </div>
  </div>
  </article>
</li>


<style>
  article {
    color: hsl(190 30% 12%);
    border-bottom: 1px solid #dadada;


    display: grid; /* Use grid layout */
    grid-template-rows: 0fr; /* Default to collapsed state */
    transition: all 5s ease-in-out; /* 3 */
    overflow: hidden; /* Ensure no overflow */


    h3 {
      font-weight: 700;
      color: #181818;
      text-wrap: revert;
    }

    button {
      border: none;
      text-align: start;
      padding: 0;
      inline-size: 100%;
      padding-block: 1rlh;
      display: flex;
      gap: 1rem;
      justify-content: space-between;

      svg {
        inline-size: auto;
        height: 1lh;
        flex-shrink: 0;

        .vertical-line {
          transform-box: fill-box;
          transform-origin: 50% 50%;
          rotate: z 0deg;
        }
      }
    }
  
    &:has(button[aria-expanded="true"]) .answer {
      display: grid;
      grid-template-rows: 1fr; /* 5 */
      &:last-child {
        padding-block-end: 1rlh;
      }
  }

svg {
  inline-size: auto;
  height: 1rem;
  flex-shrink: 0;
  transition: all 0.4s ease-in-out;
}

button[aria-expanded="true"] svg {
  transform: rotate(45deg); /* Rotér ikon når knappen er åbnet */
}

.vertical-line {
  transform-box: fill-box;
  transform-origin: 50% 50%;
}

    .answer {
      color: #595566;

      display: grid; 
      grid-template-rows: 0fr;
      transition: grid-template-rows 0.4s ease-in-out;
      
      .answer-content {
        overflow: hidden; 
       
      }
      
      > * + * {
        margin-top: 1em;
      }

    


      .link-block {
        display: block;
      }
    }
  }

</style>



<!-- 
<style>
  article {
    color: hsl(190 30% 12%);
    border-bottom: 1px solid #dadada;

    h3 {
      font-weight: 700;
      color: #181818;
      text-wrap: revert;
    }

    button {
      border: none;
      text-align: start;
      padding: 0;
      inline-size: 100%;
      padding-block: 1rlh;
      display: flex;
      gap: 1rem;
      justify-content: space-between;

      svg {
        inline-size: auto;
        height: 1lh;
        flex-shrink: 0;

        .vertical-line {
          transform-box: fill-box;
          transform-origin: 50% 50%;
          rotate: z 0deg;
          transition: 0.6s;
        }
      }
    }

    .answer {
      color: #595566;

      > * + * {
        margin-top: 1em;
      }

      :last-child {
        padding-block-end: 1rlh;
      }

      .link-block {
        display: block;
      }
    }
  }
</style> -->

